#!/usr/bin/env python3
"""
Script de Verifica√ß√£o da Instala√ß√£o
===================================

Verifica se todas as depend√™ncias est√£o instaladas e funcionando
corretamente no projeto ICLearningWebScraping.
"""

import sys
import subprocess
import importlib
import requests
from pathlib import Path

# Configurar PYTHONPATH
sys.path.append(str(Path(__file__).parent.parent))
try:
    from scripts.setup_path import setup_python_path
    setup_python_path()
except ImportError:
    pass

def verificar_python():
    """Verifica a vers√£o do Python."""
    version = sys.version_info
    print(f"üêç Python {version.major}.{version.minor}.{version.micro}")
    
    if version < (3, 12):
        print("‚ùå Python 3.12+ √© recomendado")
        return False
    else:
        print("‚úÖ Vers√£o do Python OK")
        return True

def verificar_dependencia(nome, import_name=None, version_attr='__version__'):
    """Verifica se uma depend√™ncia est√° instalada."""
    try:
        if import_name is None:
            import_name = nome
        
        modulo = importlib.import_module(import_name)
        
        # Tentar obter vers√£o
        version = "desconhecida"
        if hasattr(modulo, version_attr):
            version = getattr(modulo, version_attr)
        elif hasattr(modulo, 'VERSION'):
            version = getattr(modulo, 'VERSION')
        elif hasattr(modulo, 'version'):
            version = getattr(modulo, 'version')
        
        print(f"‚úÖ {nome} ({version})")
        return True
        
    except ImportError:
        print(f"‚ùå {nome} - N√ÉO INSTALADO")
        return False
    except Exception as e:
        print(f"‚ö†Ô∏è  {nome} - Erro: {e}")
        return False

def verificar_estrutura_projeto():
    """Verifica se a estrutura do projeto est√° correta."""
    print("\nüìÅ Verificando estrutura do projeto...")
    
    pastas_obrigatorias = [
        'src',
        'src/examples',
        'src/exercises', 
        'src/scrapers',
        'docs',
        'config',
        'data',
        'scripts',
        'venv'
    ]
    
    arquivos_obrigatorios = [
        'README.md',
        'requirements.txt',
        'setup.py',
        'src/__init__.py',
        'src/examples/example_01_RequestHTML.py',
        'src/scrapers/scraper_noticias.py'
    ]
    
    project_root = Path.cwd()
    tudo_ok = True
    
    # Verificar pastas
    for pasta in pastas_obrigatorias:
        caminho = project_root / pasta
        if caminho.exists() and caminho.is_dir():
            print(f"‚úÖ Pasta: {pasta}")
        else:
            print(f"‚ùå Pasta faltando: {pasta}")
            tudo_ok = False
    
    # Verificar arquivos
    for arquivo in arquivos_obrigatorios:
        caminho = project_root / arquivo
        if caminho.exists() and caminho.is_file():
            print(f"‚úÖ Arquivo: {arquivo}")
        else:
            print(f"‚ùå Arquivo faltando: {arquivo}")
            tudo_ok = False
    
    return tudo_ok

def verificar_conexao_internet():
    """Verifica se h√° conex√£o com a internet."""
    print("\nüåê Testando conex√£o com a internet...")
    
    try:
        response = requests.get('https://httpbin.org/get', timeout=10)
        if response.status_code == 200:
            print("‚úÖ Conex√£o com a internet OK")
            return True
        else:
            print(f"‚ö†Ô∏è  Conex√£o inst√°vel (Status: {response.status_code})")
            return False
            
    except requests.RequestException as e:
        print(f"‚ùå Sem conex√£o com a internet: {e}")
        return False

def verificar_imports_projeto():
    """Verifica se os m√≥dulos do projeto podem ser importados."""
    print("\nüì¶ Testando imports do projeto...")
    
    testes = [
        ('src.examples', 'M√≥dulo de exemplos'),
        ('src.exercises', 'M√≥dulo de exerc√≠cios'), 
        ('src.scrapers', 'M√≥dulo de scrapers'),
        ('src.scrapers.scraper_noticias', 'Scraper de not√≠cias')
    ]
    
    tudo_ok = True
    
    for modulo, descricao in testes:
        try:
            importlib.import_module(modulo)
            print(f"‚úÖ {descricao}")
        except ImportError as e:
            print(f"‚ùå {descricao}: {e}")
            tudo_ok = False
        except Exception as e:
            print(f"‚ö†Ô∏è  {descricao}: Erro inesperado - {e}")
            tudo_ok = False
    
    return tudo_ok

def executar_teste_basico():
    """Executa um teste b√°sico de scraping."""
    print("\nüß™ Executando teste b√°sico de scraping...")
    
    try:
        # Importar o scraper
        sys.path.append(str(Path.cwd()))
        from src.scrapers.scraper_noticias import NoticiasScraper
        
        # Criar inst√¢ncia
        scraper = NoticiasScraper("https://example.com")
        print("‚úÖ Scraper criado com sucesso")
        
        # Testar m√©todo b√°sico
        html_teste = "<html><body><h1>Teste</h1></body></html>"
        resultado = scraper.extrair_noticias_exemplo(html_teste)
        
        if isinstance(resultado, list):
            print("‚úÖ Extra√ß√£o de dados funcionando")
            return True
        else:
            print("‚ùå Extra√ß√£o de dados retornou tipo incorreto")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro no teste: {e}")
        return False

def main():
    """Fun√ß√£o principal de verifica√ß√£o."""
    print("üîç ICLearning WebScraping - Verifica√ß√£o da Instala√ß√£o")
    print("=" * 60)
    
    resultados = []
    
    # Verifica√ß√µes
    print("\nüìã VERIFICA√á√ïES B√ÅSICAS")
    print("-" * 30)
    resultados.append(verificar_python())
    
    print("\nüì¶ DEPEND√äNCIAS PYTHON")
    print("-" * 30)
    dependencias = [
        ('requests', None),
        ('bs4', 'beautifulsoup4'),
        ('pandas', None),
        ('lxml', None), 
        ('html5lib', None)
    ]
    
    for dep in dependencias:
        nome = dep[1] if dep[1] else dep[0]
        resultados.append(verificar_dependencia(nome, dep[0]))
    
    # Verifica√ß√µes do projeto
    resultados.append(verificar_estrutura_projeto())
    resultados.append(verificar_conexao_internet())
    resultados.append(verificar_imports_projeto())
    resultados.append(executar_teste_basico())
    
    # Resumo final
    print("\n" + "=" * 60)
    print("üìä RESUMO DA VERIFICA√á√ÉO")
    print("=" * 60)
    
    sucessos = sum(resultados)
    total = len(resultados)
    
    print(f"‚úÖ Verifica√ß√µes bem-sucedidas: {sucessos}/{total}")
    print(f"‚ùå Verifica√ß√µes falharam: {total - sucessos}/{total}")
    
    if sucessos == total:
        print("\nüéâ INSTALA√á√ÉO PERFEITA!")
        print("‚ú® Tudo funcionando corretamente!")
        print("üöÄ Voc√™ pode executar os exemplos sem problemas.")
        print("\nüí° Pr√≥ximos passos:")
        print("   ‚Ä¢ Execute: python scripts/run_all_examples.py")
        print("   ‚Ä¢ Leia: README.md para guia completo")
        print("   ‚Ä¢ Explore: src/examples/ para aprender")
    else:
        print(f"\n‚ö†Ô∏è  PROBLEMAS ENCONTRADOS ({total - sucessos})")
        print("üîß Para resolver:")
        print("   ‚Ä¢ Ative o ambiente virtual: source venv/bin/activate")
        print("   ‚Ä¢ Instale depend√™ncias: pip install -r requirements.txt")
        print("   ‚Ä¢ Execute do diret√≥rio correto do projeto")
        print("   ‚Ä¢ Verifique conex√£o com a internet")
        
    return sucessos == total

if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  Verifica√ß√£o interrompida pelo usu√°rio")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erro inesperado na verifica√ß√£o: {e}")
        sys.exit(1)